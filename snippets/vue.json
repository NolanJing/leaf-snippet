{
  "lf": {
    "name": "lf",
    "prefix": "lf",
    "body": [
      "<template>\r",
      "  <view-container></view-container>\r",
      "</template>\r",
      "<script lang=\"ts\">\r",
      "import { Component, Vue } from 'vue-property-decorator';\r",
      "@Component({\r",
      "  name: '$1View',\r",
      "})\r",
      "export default class $1View extends Vue {\r",
      "  $0\r",
      "}\r",
      "</script>\r",
      "<style lang=\"scss\" scoped>\r",
      "</style>"
    ],
    "description": "基本的Leaf Vue文件"
  },
  "lfDialog": {
    "name": "lfDialog",
    "prefix": "lfDialog",
    "body": [
      "<template>\r",
      "  <el-dialog :title=\"title\" :visible=\"true\" @close=\"onClose\" width=\"520px\">\r",
      "    <div slot=\"footer\" class=\"dialog-footer\">\r",
      "      <el-button @click=\"onClose\">关闭</el-button>\r",
      "      <el-button type=\"primary\" :loading=\"loading.confirm\" @click=\"onConfirm\">确认</el-button>\r",
      "    </div>\r",
      "  </el-dialog>\r",
      "</template>\r",
      "<script lang=\"ts\">\r",
      "import { Component, Vue, Prop } from 'vue-property-decorator';\r",
      "// import HTTP_CS_IMAGE_HUB_USER, {CsImageHubUserVO} from '@/apis/app/cs-image-hub-user';\r",
      "\r",
      "@Component({\r",
      "  name: '$0Dialog',\r",
      "})\r",
      "export default class $0Dialog extends Vue {\r",
      "  @Prop({\r",
      "    default: {},\r",
      "  })\r",
      "  public itemData!: any;\r",
      "\r",
      "  public loading: LoadingVO = {\r",
      "    confirm: false,\r",
      "  };\r",
      "\r",
      "  public get title() {\r",
      "    return this.isEdit ? '编辑' : '新增';\r",
      "  }\r",
      "\r",
      "  public get isEdit() {\r",
      "    return true;\r",
      "  }\r",
      "\r",
      "  public onConfirm() {\r",
      "    this.\\$emit('on-close', {\r",
      "      name: 'hub',\r",
      "      type: 'success',\r",
      "    });\r",
      "  }\r",
      "\r",
      "  public onClose(type = 'dismiss') {\r",
      "    this.\\$emit('on-close', {\r",
      "      name: 'hub',\r",
      "      type: type,\r",
      "    });\r",
      "  }\r",
      "}\r",
      "</script>\r",
      "<style lang=\"scss\" scoped>\r",
      "</style>\r",
      ""
    ],
    "description": "弹窗模板页"
  },
  "lfList": {
    "name": "lfList",
    "prefix": "lfList",
    "body": [
      "<template>\r",
      "  <view-container>\r",
      "    <div class=\"ef-action-wrap\">\r",
      "      <el-button type=\"primary\">新建</el-button>\r",
      "      <el-button icon=\"el-icon-refresh\"></el-button>\r",
      "      <div class=\"ef-search--group\">\r",
      "        <el-input\r",
      "          v-model=\"form.name\"\r",
      "          @clear=\"getPageList\"\r",
      "          @keyup.enter.native=\"getPageList\"\r",
      "        >\r",
      "          <el-button\r",
      "            icon=\"el-icon-search\"\r",
      "            slot=\"append\"\r",
      "            @click.stop=\"getPageList\"\r",
      "          ></el-button>\r",
      "        </el-input>\r",
      "      </div>\r",
      "    </div>\r",
      "\r",
      "    <div v-loading=\"loading.table\" class=\"mt-16\">\r",
      "      <el-table :data=\"$0\">\r",
      "        <el-table-column prop=\"name\" label=\"名称\">\r",
      "          <template slot-scope=\"{ row }\">\r",
      "            <el-button type=\"text\" @click=\"checkDetail(row)\">{{\r",
      "              row.name\r",
      "            }}</el-button>\r",
      "          </template>\r",
      "        </el-table-column>\r",
      "        <el-table-column prop=\"test\" label=\"测试\"></el-table-column>\r",
      "        <el-table-column width=\"160\" label=\"操作\">\r",
      "          <template slot-scope=\"{ row }\">\r",
      "            <el-dropdown\r",
      "              @command=\"(command) => onMenuSelect(command, row)\"\r",
      "              size=\"small\"\r",
      "            >\r",
      "              <el-button type=\"text\">更多</el-button>\r",
      "              <el-dropdown-menu slot=\"dropdown\">\r",
      "                <el-dropdown-item command=\"edit\">编辑</el-dropdown-item>\r",
      "                <el-dropdown-item command=\"delete\">删除</el-dropdown-item>\r",
      "              </el-dropdown-menu>\r",
      "            </el-dropdown>\r",
      "          </template>\r",
      "        </el-table-column>\r",
      "      </el-table>\r",
      "      <el-pagination\r",
      "        v-if=\"pageTotal > 10\"\r",
      "        @size-change=\"(val) => onPageChange('pageSize', val)\"\r",
      "        @current-change=\"(val) => onPageChange('pageNow', val)\"\r",
      "        :current-page=\"page.pageNow\"\r",
      "        :total=\"pageTotal\"\r",
      "      ></el-pagination>\r",
      "    </div>\r",
      "  </view-container>\r",
      "</template>\r",
      "<script lang=\"ts\">\r",
      "import { Component, Mixins } from 'vue-property-decorator';\r",
      "import DateFormat from '@/mixins/date_format';\r",
      "import PageData from '@/mixins/page_data';\r",
      "// import HTTP_API from '@/api/app/controller-name';\r",
      "\r",
      "@Component({\r",
      "  name: '$1View',\r",
      "})\r",
      "export default class $1View extends Mixins(DateFormat, PageData) {\r",
      "  public loading: LoadingVO = {\r",
      "    table: false,\r",
      "  };\r",
      "  public form = {\r",
      "    name: '',\r",
      "  };\r",
      "  public $0 = [];\r",
      "  public mounted() {\r",
      "    this.getPageList();\r",
      "  }\r",
      "\r",
      "  public async getPageList() {\r",
      "    try {\r",
      "      this.loading.table = true;\r",
      "      let r = await HTTP_API.do(params);\r",
      "      if (r.data.code == 0) {\r",
      "        this.$0 = r.data.data.records;\r",
      "        this.pageTotal = r.data.data.total;\r",
      "      }\r",
      "    } catch (e) {\r",
      "      console.log(e);\r",
      "    } finally {\r",
      "      this.loading.table = false;\r",
      "    }\r",
      "  }\r",
      "\r",
      "  public onPageChange(type: string, val: number) {\r",
      "    this.page[type] = val;\r",
      "    this.getPageList();\r",
      "  }\r",
      "\r",
      "  public onMenuSelect(command: 'edit' | 'delete' | number, row: any) {\r",
      "    let actionMap: any = {\r",
      "      recovery: {\r",
      "        msg: '是否手动回收？',\r",
      "        action: () => {\r",
      "          this.recovery(row.pvName);\r",
      "        },\r",
      "      },\r",
      "      delete: {\r",
      "        msg: i18n.t('message.delete-confirm-msg'),\r",
      "        action: () => {\r",
      "          this.delRow(row.pvName);\r",
      "        },\r",
      "      },\r",
      "    };\r",
      "\r",
      "    this.\\$confirm(actionMap[command].msg, actionMap[command].title, {\r",
      "      type: 'warning',\r",
      "    })\r",
      "      .then(() => {\r",
      "        actionMap[command].action();\r",
      "      })\r",
      "      .catch(() => {\r",
      "        this.\\$message.info('操作已取消！');\r",
      "      });\r",
      "  }\r",
      "\r",
      "  public async delRow(id: any) {\r",
      "    try {\r",
      "      const r = await HTTP_CLUSTER.deleteCluster(clusterName);\r",
      "      if (r.data.code === 0) {\r",
      "        this.\\$message.success(i18n.t('cluster-mgr.delete-cluster-success'));\r",
      "        this.getList();\r",
      "      }\r",
      "    } catch (error) {\r",
      "      console.log('error: ', error);\r",
      "    } finally {\r",
      "    }\r",
      "  }\r",
      "}\r",
      "</script>\r",
      "<style lang=\"scss\" scoped></style>\r",
      ""
    ],
    "description": "带搜索的列表页"
  }
}